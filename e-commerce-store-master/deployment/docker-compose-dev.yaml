version: '3.8'
name: e-commerce-store-dev
services:
  db-users:
    container_name: db-users-dev
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users
    volumes:
      - db-pgdata-users-dev:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - e-commerce-store-dev

  db-inventory:
    container_name: db-inventory-dev
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventory
    volumes:
      - db-pgdata-inventory-dev:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - e-commerce-store-dev

  db-reviews:
    container_name: db-reviews-dev
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: reviews
    volumes:
      - db-pgdata-reviews-dev:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    restart: unless-stopped
    networks:
      - e-commerce-store-dev

  db-orders:
    container_name: db-orders-dev
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders
    volumes:
      - db-pgdata-orders-dev:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    restart: unless-stopped
    networks:
      - e-commerce-store-dev

  eureka-service:
    container_name: eureka-service-dev
    build:
      context: ../eureka-service
    image: eureka-service
    environment:
      SPRING_PROFILES_ACTIVE: 'docker'
    restart: unless-stopped
    networks:
      - e-commerce-store-dev

  api-gateway:
    container_name: api-gateway-dev
    build:
      context: ../api-gateway
    image: api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: 'docker'
    restart: unless-stopped
    depends_on:
      - eureka-service
    networks:
      - e-commerce-store-dev

  user-service:
    container_name: user-service-dev
    build:
      context: ../user-service
    image: user-service
    environment:
      SPRING_PROFILES_ACTIVE: 'docker'
    restart: unless-stopped
    depends_on:
      - eureka-service
      - db-users
    networks:
      - e-commerce-store-dev

  auth-service:
    container_name: auth-service-dev
    build:
      context: ../auth-service
    image: auth-service
    environment:
      SPRING_PROFILES_ACTIVE: 'docker'
    restart: unless-stopped
    depends_on:
      - eureka-service
      - user-service
    networks:
      - e-commerce-store-dev

  inventory-service:
    container_name: inventory-service-dev
    build:
      context: ../inventory-service
    image: inventory-service
    environment:
      SPRING_PROFILES_ACTIVE: 'docker'
    restart: unless-stopped
    depends_on:
      - eureka-service
      - db-inventory
    networks:
      - e-commerce-store-dev

  order-service:
    container_name: order-service-dev
    build:
      context: ../order-service
    image: order-service
    environment:
      SPRING_PROFILES_ACTIVE: 'docker'
    restart: unless-stopped
    depends_on:
      - eureka-service
      - db-users
    networks:
      - e-commerce-store-dev

  reviews-service:
    container_name: reviews-service-dev
    build:
      context: ../reviews-service
    image: reviews-service
    environment:
      SPRING_PROFILES_ACTIVE: 'docker'
    restart: unless-stopped
    depends_on:
      - eureka-service
      - db-reviews
    networks:
      - e-commerce-store-dev

  notification-service:
    container_name: notification-service-dev
    build:
      context: ../notification-service
    image: notification-service
    environment:
      SPRING_PROFILES_ACTIVE: 'docker'
    restart: unless-stopped
    depends_on:
      - eureka-service
    networks:
      - e-commerce-store-dev

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-dev
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - e-commerce-store-dev

  broker:
    image: confluentinc/cp-kafka:latest
    container_name: broker-dev
    ports:
      - "9092:9092"
    expose:
      - "29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - e-commerce-store-dev

  init-broker:
    container_name: init-broker-dev
    image: confluentinc/cp-kafka:latest
    depends_on:
      - broker
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server broker:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic order.created.v1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server broker:29092 --list
      "
    networks:
      - e-commerce-store-dev

  otel-collector:
    container_name: otel-collector-dev
    image: otel/opentelemetry-collector-contrib:0.96.0
    restart: unless-stopped
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yaml
    volumes:
      - ./otel-collector/otel-collector.yaml:/etc/otelcol-contrib/otel-collector.yaml
    ports:
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
      - "55679:55679" # zpages extension
    networks:
      - e-commerce-store-dev
    depends_on:
      - zipkin

  prometheus:
    container_name: prometheus-dev
    image: prom/prometheus
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yaml
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
    ports:
      - "9090:9090"
    networks:
      - e-commerce-store-dev

  grafana:
    container_name: grafana-dev
    image: grafana/grafana:latest
    volumes:
      - ./grafana/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    ports:
      - "3000:3000"
    networks:
      - e-commerce-store-dev

  loki:
    container_name: loki-dev
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - e-commerce-store-dev

  zipkin:
    container_name: zipkin-dev
    image: openzipkin/zipkin
    restart: unless-stopped
    ports:
      - "9411:9411"
    networks:
      - e-commerce-store-dev

  tempo:
    container_name: tempo-dev
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
    ports:
      - "3200:3200"   # tempo
      - "4317"  # otlp grpc
    networks:
        - e-commerce-store-dev

volumes:
  db-pgdata-users-dev:
  db-pgdata-inventory-dev:
  db-pgdata-reviews-dev:
  db-pgdata-orders-dev:

networks:
  e-commerce-store-dev:
    driver: bridge

